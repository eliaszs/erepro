// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EchoRequest struct {
	Value                string   `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoRequest) Reset()         { *m = EchoRequest{} }
func (m *EchoRequest) String() string { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()    {}
func (*EchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_fb3577d953634bb0, []int{0}
}
func (m *EchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoRequest.Unmarshal(m, b)
}
func (m *EchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoRequest.Marshal(b, m, deterministic)
}
func (dst *EchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoRequest.Merge(dst, src)
}
func (m *EchoRequest) XXX_Size() int {
	return xxx_messageInfo_EchoRequest.Size(m)
}
func (m *EchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EchoRequest proto.InternalMessageInfo

func (m *EchoRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type GetEchoRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetEchoRequest) Reset()         { *m = GetEchoRequest{} }
func (m *GetEchoRequest) String() string { return proto.CompactTextString(m) }
func (*GetEchoRequest) ProtoMessage()    {}
func (*GetEchoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_fb3577d953634bb0, []int{1}
}
func (m *GetEchoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetEchoRequest.Unmarshal(m, b)
}
func (m *GetEchoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetEchoRequest.Marshal(b, m, deterministic)
}
func (dst *GetEchoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEchoRequest.Merge(dst, src)
}
func (m *GetEchoRequest) XXX_Size() int {
	return xxx_messageInfo_GetEchoRequest.Size(m)
}
func (m *GetEchoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEchoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEchoRequest proto.InternalMessageInfo

func (m *GetEchoRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type EchoResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoResponse) Reset()         { *m = EchoResponse{} }
func (m *EchoResponse) String() string { return proto.CompactTextString(m) }
func (*EchoResponse) ProtoMessage()    {}
func (*EchoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_fb3577d953634bb0, []int{2}
}
func (m *EchoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoResponse.Unmarshal(m, b)
}
func (m *EchoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoResponse.Marshal(b, m, deterministic)
}
func (dst *EchoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoResponse.Merge(dst, src)
}
func (m *EchoResponse) XXX_Size() int {
	return xxx_messageInfo_EchoResponse.Size(m)
}
func (m *EchoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoResponse proto.InternalMessageInfo

func (m *EchoResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EchoResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EchoHistoryResponse struct {
	History              []string `protobuf:"bytes,1,rep,name=history" json:"history,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EchoHistoryResponse) Reset()         { *m = EchoHistoryResponse{} }
func (m *EchoHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*EchoHistoryResponse) ProtoMessage()    {}
func (*EchoHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_fb3577d953634bb0, []int{3}
}
func (m *EchoHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EchoHistoryResponse.Unmarshal(m, b)
}
func (m *EchoHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EchoHistoryResponse.Marshal(b, m, deterministic)
}
func (dst *EchoHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EchoHistoryResponse.Merge(dst, src)
}
func (m *EchoHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_EchoHistoryResponse.Size(m)
}
func (m *EchoHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EchoHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EchoHistoryResponse proto.InternalMessageInfo

func (m *EchoHistoryResponse) GetHistory() []string {
	if m != nil {
		return m.History
	}
	return nil
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "proto.EchoRequest")
	proto.RegisterType((*GetEchoRequest)(nil), "proto.GetEchoRequest")
	proto.RegisterType((*EchoResponse)(nil), "proto.EchoResponse")
	proto.RegisterType((*EchoHistoryResponse)(nil), "proto.EchoHistoryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	GetEchoHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EchoHistoryResponse, error)
	GetEcho(ctx context.Context, in *GetEchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/proto.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetEchoHistory(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EchoHistoryResponse, error) {
	out := new(EchoHistoryResponse)
	err := c.cc.Invoke(ctx, "/proto.EchoService/GetEchoHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) GetEcho(ctx context.Context, in *GetEchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/proto.EchoService/GetEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *EchoRequest) (*EchoResponse, error)
	GetEchoHistory(context.Context, *empty.Empty) (*EchoHistoryResponse, error)
	GetEcho(context.Context, *GetEchoRequest) (*EchoResponse, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetEchoHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetEchoHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EchoService/GetEchoHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetEchoHistory(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_GetEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).GetEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EchoService/GetEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).GetEcho(ctx, req.(*GetEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "GetEchoHistory",
			Handler:    _EchoService_GetEchoHistory_Handler,
		},
		{
			MethodName: "GetEcho",
			Handler:    _EchoService_GetEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_echo_fb3577d953634bb0) }

var fileDescriptor_echo_fb3577d953634bb0 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4e, 0x83, 0x40,
	0x14, 0x85, 0x03, 0x8a, 0xb5, 0x57, 0x5b, 0xcd, 0xc5, 0x1a, 0x82, 0x2e, 0xc8, 0xb8, 0x69, 0x5c,
	0x30, 0xf1, 0x67, 0xe5, 0xda, 0x46, 0x17, 0xae, 0x30, 0x71, 0x4f, 0x61, 0x2c, 0x93, 0x54, 0x06,
	0x61, 0x20, 0x69, 0x8c, 0x1b, 0x5f, 0xc1, 0x47, 0xf3, 0x15, 0x7c, 0x09, 0x77, 0x86, 0x19, 0x40,
	0xda, 0xb8, 0x9a, 0xdc, 0x39, 0xe7, 0x7e, 0x39, 0xf7, 0x00, 0xb0, 0x28, 0x11, 0x7e, 0x96, 0x0b,
	0x29, 0xd0, 0x52, 0x8f, 0x7b, 0xb2, 0x10, 0x62, 0xb1, 0x64, 0x54, 0x4d, 0xf3, 0xf2, 0x99, 0xb2,
	0x97, 0x4c, 0xae, 0xb4, 0xc7, 0x3d, 0x6d, 0xc4, 0x30, 0xe3, 0x34, 0x4c, 0x53, 0x21, 0x43, 0xc9,
	0x45, 0x5a, 0x68, 0x95, 0x9c, 0xc1, 0xde, 0x2c, 0x4a, 0x44, 0xc0, 0x5e, 0x4b, 0x56, 0x48, 0x3c,
	0x02, 0xab, 0x0a, 0x97, 0x25, 0x73, 0x0c, 0xcf, 0x98, 0x0e, 0x03, 0x3d, 0x10, 0x0f, 0xc6, 0x77,
	0x4c, 0xf6, 0x7d, 0x63, 0x30, 0x79, 0xac, 0x4c, 0x56, 0x60, 0xf2, 0x98, 0x5c, 0xc3, 0xbe, 0x96,
	0x8b, 0x4c, 0xa4, 0x05, 0xdb, 0xd4, 0xff, 0xb8, 0x66, 0x9f, 0x4b, 0xc1, 0xae, 0xb7, 0xee, 0x79,
	0x21, 0x45, 0xbe, 0xea, 0x96, 0x1d, 0x18, 0x24, 0xfa, 0xcb, 0x31, 0xbc, 0xad, 0xe9, 0x30, 0x68,
	0xc7, 0xcb, 0x1f, 0x43, 0xc7, 0x7d, 0x64, 0x79, 0xc5, 0x23, 0x86, 0xb7, 0xb0, 0x5d, 0x8f, 0x88,
	0xfa, 0x1a, 0xbf, 0x17, 0xd1, 0xb5, 0xd7, 0xfe, 0x34, 0x9a, 0xd8, 0x1f, 0x5f, 0xdf, 0x9f, 0xe6,
	0x88, 0xec, 0xd2, 0xea, 0x82, 0xd6, 0x45, 0xde, 0x18, 0xe7, 0xf8, 0xd4, 0x9d, 0xd7, 0x24, 0xc1,
	0x63, 0x5f, 0x97, 0xe6, 0xb7, 0x8d, 0xfa, 0xb3, 0xba, 0x51, 0xd7, 0xed, 0x31, 0x37, 0x52, 0x93,
	0x43, 0x85, 0x06, 0xec, 0xd0, 0xf8, 0x00, 0x83, 0x86, 0x8b, 0x93, 0x66, 0x71, 0xbd, 0xc6, 0xff,
	0x33, 0x4e, 0x14, 0xe8, 0x00, 0x47, 0x2d, 0x88, 0xbe, 0xf1, 0xf8, 0x7d, 0xbe, 0xa3, 0xac, 0x57,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xfc, 0x35, 0x4e, 0x00, 0x02, 0x00, 0x00,
}
